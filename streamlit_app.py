import streamlit as st
import pandas as pd
import matplotlib.pyplot as plt

# -----------------------------
# Param√®tres des options
# -----------------------------
PRIX_ESSENCE = 695   # FCFA / L
PRIX_DIESEL = 720    # FCFA / L
PRIX_KWH = 109       # FCFA / kWh

# Consommations
CONS_ESSENCE = 7 / 100    # L/km
CONS_DIESEL = 7 / 100     # L/km
CONS_HYBRIDE_ESS = 4 / 100   # L/km
CONS_HYBRIDE_KWH = 0.1       # kWh/km
CONS_ELEC = 0.2              # kWh/km

# Emissions (kg CO‚ÇÇ par km)
CO2_ESSENCE = 0.26
CO2_DIESEL = 0.23
CO2_HYBRIDE = 0.15
CO2_ELEC = 0.05

# -----------------------------
# Interface utilisateur
# -----------------------------
st.title("üöö Optimisation logistique intelligente")
st.write("Comparatif des co√ªts (FCFA), temps, et √©missions CO‚ÇÇ pour diff√©rents sc√©narios")

distance = st.number_input("Distance √† parcourir (km)", min_value=10, value=100)
delai_max = st.number_input("D√©lai maximum (heures)", min_value=1, value=4)

# -----------------------------
# Calculs
# -----------------------------
resultats = []

# Thermique Essence
cout_ess = distance * CONS_ESSENCE * PRIX_ESSENCE
temps_ess = distance / 60
resultats.append({
    "Option": "Thermique Essence",
    "Co√ªt (FCFA)": round(cout_ess, 2),
    "Temps (h)": round(temps_ess, 2),
    "√âmissions CO‚ÇÇ (kg)": round(distance * CO2_ESSENCE, 2)
})

# Thermique Diesel
cout_diesel = distance * CONS_DIESEL * PRIX_DIESEL
temps_diesel = distance / 60
resultats.append({
    "Option": "Thermique Diesel",
    "Co√ªt (FCFA)": round(cout_diesel, 2),
    "Temps (h)": round(temps_diesel, 2),
    "√âmissions CO‚ÇÇ (kg)": round(distance * CO2_DIESEL, 2)
})

# Hybride
cout_hybride = (distance * CONS_HYBRIDE_ESS * PRIX_ESSENCE) + (distance * CONS_HYBRIDE_KWH * PRIX_KWH)
temps_hybride = distance / 55
resultats.append({
    "Option": "Hybride",
    "Co√ªt (FCFA)": round(cout_hybride, 2),
    "Temps (h)": round(temps_hybride, 2),
    "√âmissions CO‚ÇÇ (kg)": round(distance * CO2_HYBRIDE, 2)
})

# √âlectrique
cout_elec = distance * CONS_ELEC * PRIX_KWH
temps_elec = distance / 50
resultats.append({
    "Option": "√âlectrique",
    "Co√ªt (FCFA)": round(cout_elec, 2),
    "Temps (h)": round(temps_elec, 2),
    "√âmissions CO‚ÇÇ (kg)": round(distance * CO2_ELEC, 2)
})

# -----------------------------
# Comparatif tableau
# -----------------------------
df = pd.DataFrame(resultats)
df["Valide ?"] = df["Temps (h)"] <= (delai_max - 0.16)

st.subheader("üìä R√©sultats comparatifs")
st.dataframe(df)

# -----------------------------
# Graphiques
# -----------------------------
st.subheader("üìà Comparaison des co√ªts")
fig, ax = plt.subplots()
ax.bar(df["Option"], df["Co√ªt (FCFA)"], color="orange")
ax.set_ylabel("Co√ªt (FCFA)")
plt.xticks(rotation=30)
st.pyplot(fig)

st.subheader("üåç Comparaison des √©missions CO‚ÇÇ")
fig2, ax2 = plt.subplots()
ax2.bar(df["Option"], df["√âmissions CO‚ÇÇ (kg)"], color="green")
ax2.set_ylabel("√âmissions CO‚ÇÇ (kg)")
plt.xticks(rotation=30)
st.pyplot(fig2)

# -----------------------------
# Recommandations
# -----------------------------
solutions_valides = df[df["Valide ?"] == True]

if not solutions_valides.empty:
    meilleur_cout = solutions_valides.loc[solutions_valides["Co√ªt (FCFA)"].idxmin()]
    plus_rapide = solutions_valides.loc[solutions_valides["Temps (h)"].idxmin()]
    moins_polluante = solutions_valides.loc[solutions_valides["√âmissions CO‚ÇÇ (kg)"].idxmin()]

    df_equilibre = solutions_valides.copy()
    df_equilibre["Score"] = (df_equilibre["Co√ªt (FCFA)"]/df_equilibre["Co√ªt (FCFA)"].max())*0.6 + \
                            (df_equilibre["√âmissions CO‚ÇÇ (kg)"]/df_equilibre["√âmissions CO‚ÇÇ (kg)"].max())*0.4
    meilleur_equilibre = df_equilibre.loc[df_equilibre["Score"].idxmin()]

    st.success(f"‚úÖ Meilleure solution √©conomique : **{meilleur_cout['Option']}**")
    st.info(f"‚è±Ô∏è Option la plus rapide : **{plus_rapide['Option']}**")
    st.warning(f"üåç Option la moins polluante : **{moins_polluante['Option']}**")
    st.success(f"‚öñÔ∏è Option la plus √©quilibr√©e (rentable + √©cologique) : **{meilleur_equilibre['Option']}**")

    # -----------------------------
    # Rapport automatique
    # -----------------------------
    st.subheader("üìë Rapport automatique")
    rapport = f"""
    Pour un trajet de **{distance} km** avec un d√©lai maximum de **{delai_max} h** :

    - L'option **{plus_rapide['Option']}** est la plus rapide ({plus_rapide['Temps (h)']} h).
    - L'option **{meilleur_cout['Option']}** est la moins ch√®re ({meilleur_cout['Co√ªt (FCFA)']} FCFA).
    - L'option **{moins_polluante['Option']}** √©met le moins de CO‚ÇÇ ({moins_polluante['√âmissions CO‚ÇÇ (kg)']} kg).
    - Enfin, l'option **{meilleur_equilibre['Option']}** offre le meilleur √©quilibre entre co√ªt et √©cologie.

    üëâ Recommandation finale : privil√©gier **{meilleur_equilibre['Option']}** pour concilier co√ªts ma√Ætris√©s et impact environnemental r√©duit.
    """
    st.write(rapport)

else:
    st.error("‚ùå Aucune option ne respecte la contrainte de d√©lai.")
    from reportlab.lib.pagesizes import A4
from reportlab.platypus import Table, TableStyle, Paragraph, SimpleDocTemplate, Spacer, Image
from reportlab.lib import colors
from reportlab.lib.styles import getSampleStyleSheet
from io import BytesIO

if not solutions_valides.empty:
    buffer = BytesIO()
    doc = SimpleDocTemplate(buffer, pagesize=A4)
    elements = []

    styles = getSampleStyleSheet()
    title_style = styles["Title"]
    normal_style = styles["Normal"]

    # üîπ Logo en haut (si disponible)
    try:
        logo = Image("logo.png", width=100, height=60)  # adapte la taille si besoin
        elements.append(logo)
    except:
        elements.append(Paragraph("üöö [Pas de logo trouv√©]", normal_style))

    elements.append(Spacer(1, 15))

    # üîπ Titre
    elements.append(Paragraph("Rapport d‚Äôoptimisation logistique", title_style))
    elements.append(Spacer(1, 20))

    # üîπ Informations de base
    elements.append(Paragraph(f"üìè Distance : {distance} km", normal_style))
    elements.append(Paragraph(f"‚è±Ô∏è D√©lai maximum : {delai_max} h", normal_style))
    elements.append(Spacer(1, 15))

    # üîπ Tableau comparatif
    data = [["Option", "Co√ªt (FCFA)", "Temps (h)", "√âmissions CO‚ÇÇ (kg)"]]
    for _, row in df.iterrows():
        data.append([row["Option"], row["Co√ªt (FCFA)"], row["Temps (h)"], row["√âmissions CO‚ÇÇ (kg)"]])

    table = Table(data, colWidths=[150, 100, 100, 120])
    table.setStyle(TableStyle([
        ("BACKGROUND", (0,0), (-1,0), colors.HexColor("#264653")),
        ("TEXTCOLOR", (0,0), (-1,0), colors.white),
        ("ALIGN", (0,0), (-1,-1), "CENTER"),
        ("GRID", (0,0), (-1,-1), 1, colors.black),
        ("FONTNAME", (0,0), (-1,0), "Helvetica-Bold"),
        ("FONTSIZE", (0,0), (-1,-1), 10),
    ]))
    elements.append(table)
    elements.append(Spacer(1, 20))

    # üîπ Recommandations
    recommendation = f"""
    ‚úÖ Meilleure solution √©conomique : {meilleur_cout['Option']} ({meilleur_cout['Co√ªt (FCFA)']} FCFA)  
    ‚è±Ô∏è Plus rapide : {plus_rapide['Option']} ({plus_rapide['Temps (h)']} h)  
    üåç Moins polluante : {moins_polluante['Option']} ({moins_polluante['√âmissions CO‚ÇÇ (kg)']} kg CO‚ÇÇ)  
    ‚öñÔ∏è Meilleur √©quilibre : {meilleur_equilibre['Option']}
    """

    elements.append(Paragraph("üìë Recommandations :", styles["Heading2"]))
    elements.append(Paragraph(recommendation, normal_style))

    doc.build(elements)

    st.download_button(
        label="üì• T√©l√©charger le rapport PDF avec logo",
        data=buffer.getvalue(),
        file_name="rapport_logistique.pdf",
        mime="application/pdf"
    )
