import streamlit as st
import pandas as pd
import numpy as np
import io
import matplotlib.pyplot as plt
from reportlab.platypus import SimpleDocTemplate, Paragraph, Spacer, Table, TableStyle, Image
from reportlab.lib.styles import getSampleStyleSheet
from reportlab.lib import colors
from reportlab.lib.pagesizes import A4

# =========================
# CONFIG & EN-T√äTE
# =========================
st.set_page_config(page_title="Assistant Logistique Intelligent", page_icon="üöõ", layout="wide")
st.title("üöõ Assistant Logistique Intelligent")
st.caption("Optimise le co√ªt, le temps, les √©missions et l‚Äôad√©quation aux marchandises ‚Äî avec contraintes de capacit√© et d‚Äôautonomie.")

# =========================
# PARAM√àTRES √âNERGIE & √âMISSIONS
# =========================
PRIX = {
    "Essence": 695.0,     # FCFA / L
    "Diesel": 720.0,      # FCFA / L
    "Electrique": 109.0,  # FCFA / kWh
}

# Consommations moyennes (par km)
CONSO = {
    "Essence": 0.07,       # L/km (7L/100km)
    "Diesel": 0.055,       # L/km (5.5L/100km)
    "Hybride": 0.045,      # L/km (4.5L/100km) -> carburant essence
    "Electrique": 0.18,    # kWh/km (18kWh/100km)
}

# Facteurs d‚Äô√©mission
EMISSION_FACTEUR = {
    "Essence": 2.31,      # kg CO2 / L
    "Diesel": 2.68,       # kg CO2 / L
    "Hybride": 2.31,      # kg CO2 / L (mix essence, conso r√©duite)
    "Electrique": 0.10,   # kg CO2 / kWh (mix r√©seau)
}

# D√©finition de v√©hicules types (vitesses, capacit√©s, autonomie, maintenance)
VEHICULES = [
    {
        "Option": "Fourgon Diesel",
        "Motorisation": "Diesel",
        "Vitesse_km_h": 75,
        "Autonomie_km": 900,      # plein
        "Capacite_kg": 1200,
        "Capacite_m3": 12,
        "Maintenance_FCFA_km": 45.0
    },
    {
        "Option": "Utilitaire Hybride",
        "Motorisation": "Hybride",
        "Vitesse_km_h": 70,
        "Autonomie_km": 800,
        "Capacite_kg": 800,
        "Capacite_m3": 7,
        "Maintenance_FCFA_km": 35.0
    },
    {
        "Option": "Fourgonnette Essence",
        "Motorisation": "Essence",
        "Vitesse_km_h": 70,
        "Autonomie_km": 700,
        "Capacite_kg": 700,
        "Capacite_m3": 6,
        "Maintenance_FCFA_km": 40.0
    },
    {
        "Option": "V√©hicule √âlectrique",
        "Motorisation": "Electrique",
        "Vitesse_km_h": 65,
        "Autonomie_km": 320,       # sans recharge en route (simplification)
        "Capacite_kg": 500,
        "Capacite_m3": 4,
        "Maintenance_FCFA_km": 20.0
    },
]

# =========================
# FONCTIONS DE CALCUL
# =========================
def cout_energie(distance_km, motorisation):
    if motorisation == "Hybride":
        # hybride utilise l‚Äôessence avec conso r√©duite
        return CONSO["Hybride"] * distance_km * PRIX["Essence"]
    elif motorisation in ("Essence", "Diesel"):
        return CONSO[motorisation] * distance_km * PRIX[motorisation]
    elif motorisation == "Electrique":
        return CONSO["Electrique"] * distance_km * PRIX["Electrique"]
    return float("inf")

def emissions(distance_km, motorisation):
    if motorisation == "Hybride":
        return CONSO["Hybride"] * distance_km * EMISSION_FACTEUR["Hybride"]
    elif motorisation in ("Essence", "Diesel"):
        return CONSO[motorisation] * distance_km * EMISSION_FACTEUR[motorisation]
    elif motorisation == "Electrique":
        return CONSO["Electrique"] * distance_km * EMISSION_FACTEUR["Electrique"]
    return float("inf")

def temps_trajet(distance_km, vitesse_km_h):
    return distance_km / max(vitesse_km_h, 1)

def suitability_goods(goods_type, motorisation):
    """
    Score d‚Äôad√©quation aux marchandises (0 = tr√®s adapt√©, 1 = peu adapt√©).
    """
    # Par d√©faut neutre
    score = 0.5

    if goods_type == "L√©ger / Colis":
        # Urbain, silencieux, faible co√ªt
        if motorisation in ("Electrique", "Hybride"):
            score = 0.0
        elif motorisation == "Essence":
            score = 0.5
        else:  # Diesel
            score = 0.7

    elif goods_type == "Lourd / Palettes":
        if motorisation == "Diesel":
            score = 0.0
        elif motorisation == "Hybride":
            score = 0.4
        elif motorisation == "Essence":
            score = 0.7
        else:  # Electrique
            score = 0.9

    elif goods_type == "Frais / Sensibles":
        # priorit√© ponctualit√© + fiabilit√©/autonomie
        if motorisation in ("Hybride", "Diesel"):
            score = 0.1
        elif motorisation == "Essence":
            score = 0.4
        else:  # Electrique (autonomie/temps recharge)
            score = 0.6

    elif goods_type == "√âco-responsable":
        if motorisation == "Electrique":
            score = 0.0
        elif motorisation == "Hybride":
            score = 0.3
        elif motorisation == "Essence":
            score = 0.7
        else:  # Diesel
            score = 0.9

    return score

def normaliser(col):
    # Min-max avec garde-fous
    cmin, cmax = np.min(col), np.max(col)
    if np.isclose(cmin, cmax):
        return np.zeros_like(col)
    return (col - cmin) / (cmax - cmin)

# =========================
# BARRE LAT√âRALE ‚Äî ENTR√âES
# =========================
with st.sidebar:
    st.header("‚öôÔ∏è Param√®tres")
    distance = st.number_input("Distance (km)", min_value=10, value=300, step=10)
    delai_max_h = st.number_input("D√©lai max (heures)", min_value=1.0, value=4.0, step=0.5)
    st.markdown("*La solution doit arriver **au moins 10 minutes** avant le d√©lai.*")

    st.divider()
    st.subheader("üì¶ Marchandises")
    goods_type = st.selectbox(
        "Type de marchandise",
        ["L√©ger / Colis", "Lourd / Palettes", "Frais / Sensibles", "√âco-responsable"]
    )
    poids_kg = st.number_input("Poids total (kg)", min_value=1, value=400, step=10)
    volume_m3 = st.number_input("Volume total (m¬≥)", min_value=1, value=3, step=1)

    st.divider()
    st.subheader("üéØ Strat√©gie d‚Äôoptimisation")
    preset = st.selectbox("Choix rapide", ["√âquilibre", "√âconomique", "Ponctualit√©", "√âcologique", "Personnalis√©e"])

    if preset == "√âquilibre":
        w_cost, w_time, w_emis, w_goods = 0.4, 0.3, 0.2, 0.1
    elif preset == "√âconomique":
        w_cost, w_time, w_emis, w_goods = 0.6, 0.2, 0.15, 0.05
    elif preset == "Ponctualit√©":
        w_cost, w_time, w_emis, w_goods = 0.2, 0.6, 0.1, 0.1
    elif preset == "√âcologique":
        w_cost, w_time, w_emis, w_goods = 0.25, 0.15, 0.5, 0.1
    else:
        w_cost = st.slider("Poids co√ªt", 0.0, 1.0, 0.4, 0.05)
        w_time = st.slider("Poids temps", 0.0, 1.0, 0.3, 0.05)
        w_emis = st.slider("Poids √©missions", 0.0, 1.0, 0.2, 0.05)
        w_goods = st.slider("Poids ad√©quation marchandise", 0.0, 1.0, 0.1, 0.05)
        # normaliser la somme √† 1
        s = w_cost + w_time + w_emis + w_goods
        if s > 0:
            w_cost, w_time, w_emis, w_goods = [x/s for x in (w_cost, w_time, w_emis, w_goods)]

    st.caption(f"Poids utilis√©s ‚Üí Co√ªt: {w_cost:.2f} | Temps: {w_time:.2f} | CO‚ÇÇ: {w_emis:.2f} | Marchandises: {w_goods:.2f}")

# =========================
# CALCUL DES SC√âNARIOS
# =========================
def calculer_scenarios():
    lignes = []
    marge_h = 10/60  # 10 minutes d'avance

    for v in VEHICULES:
        opt = v["Option"]; mot = v["Motorisation"]
        speed = v["Vitesse_km_h"]; autonomie = v["Autonomie_km"]
        cap_kg = v["Capacite_kg"]; cap_m3 = v["Capacite_m3"]; maint = v["Maintenance_FCFA_km"]

        # Contraintes de capacit√©
        if poids_kg > cap_kg or volume_m3 > cap_m3:
            continue

        # Autonomie : on exclut les VE si distance > autonomie (simplification)
        if mot == "Electrique" and distance > autonomie:
            continue

        t = temps_trajet(distance, speed)
        if t > max(delai_max_h - marge_h, 0):
            continue

        # Co√ªts & √©missions
        c_energy = cout_energie(distance, mot)
        c_maint = maint * distance
        c_total = c_energy + c_maint
        co2 = emissions(distance, mot)

        # Ad√©quation marchandises
        goods_score = suitability_goods(goods_type, mot)

        lignes.append({
            "Option": opt,
            "Motorisation": mot,
            "Vitesse (km/h)": speed,
            "Temps (h)": round(t, 2),
            "Co√ªt √©nergie (FCFA)": round(c_energy, 0),
            "Co√ªt maintenance (FCFA)": round(c_maint, 0),
            "Co√ªt total (FCFA)": round(c_total, 0),
            "√âmissions CO‚ÇÇ (kg)": round(co2, 2),
            "Capacit√© restante (kg)": cap_kg - poids_kg,
            "Volume restant (m¬≥)": cap_m3 - volume_m3,
            "Score marchandises": goods_score
        })

    return pd.DataFrame(lignes)

df = calculer_scenarios()

# =========================
# AFFICHAGE TABLE + KPI
# =========================
if df.empty:
    st.error("Aucune option ne respecte en m√™me temps les contraintes (d√©lai -10min, capacit√©, autonomie). Essayez d‚Äôajuster les param√®tres.")
else:
    st.subheader("üìä Sc√©narios faisables")
    st.dataframe(df, use_container_width=True)

    # S√©lections par crit√®re
    idx_cost = df["Co√ªt total (FCFA)"].idxmin()
    idx_time = df["Temps (h)"].idxmin()
    idx_emis = df["√âmissions CO‚ÇÇ (kg)"].idxmin()
    idx_goods = df["Score marchandises"].idxmin()

    best_cost = df.loc[idx_cost]
    best_time = df.loc[idx_time]
    best_emis = df.loc[idx_emis]
    best_goods = df.loc[idx_goods]

    # Score global (normalisation)
    df_scores = df.copy()
    df_scores["C_norm"] = normaliser(df_scores["Co√ªt total (FCFA)"].to_numpy(dtype=float))
    df_scores["T_norm"] = normaliser(df_scores["Temps (h)"].to_numpy(dtype=float))
    df_scores["E_norm"] = normaliser(df_scores["√âmissions CO‚ÇÇ (kg)"].to_numpy(dtype=float))
    df_scores["G_norm"] = normaliser(df_scores["Score marchandises"].to_numpy(dtype=float))
    df_scores["Score global"] = (
        w_cost * df_scores["C_norm"] +
        w_time * df_scores["T_norm"] +
        w_emis * df_scores["E_norm"] +
        w_goods * df_scores["G_norm"]
    )
    idx_global = df_scores["Score global"].idxmin()
    best_global = df_scores.loc[idx_global]

    c1, c2, c3, c4, c5 = st.columns(5)
    c1.metric("üí∞ Moins co√ªteuse", best_cost["Option"], f"{int(best_cost['Co√ªt total (FCFA)'])} FCFA")
    c2.metric("‚è±Ô∏è Plus rapide", best_time["Option"], f"{best_time['Temps (h)']} h")
    c3.metric("üå± Moins polluante", best_emis["Option"], f"{best_emis['√âmissions CO‚ÇÇ (kg)']} kg")
    c4.metric("üì¶ Mieux adapt√©e", best_goods["Option"], goods_type)
    c5.metric("üèÜ Recommand√©e", best_global["Option"], "Score global min")

    st.success(
        f"**Solution recommand√©e** : {best_global['Option']} "
        f"({best_global['Motorisation']}) ‚Äî Co√ªt: {int(best_global['Co√ªt total (FCFA)'])} FCFA | "
        f"Temps: {best_global['Temps (h)']} h | "
        f"CO‚ÇÇ: {best_global['√âmissions CO‚ÇÇ (kg)']} kg"
    )

    # =========================
    # GRAPHIQUES (pour l‚Äôapp & le PDF)
    # =========================
    def build_charts(dataframe):
        charts = []

        def save_fig(fig):
            buf = io.BytesIO()
            fig.savefig(buf, format="png", bbox_inches="tight")
            buf.seek(0)
            plt.close(fig)
            return buf

        # Co√ªts
        fig1, ax1 = plt.subplots()
        dataframe.plot(kind="bar", x="Option", y="Co√ªt total (FCFA)", ax=ax1, legend=False)
        ax1.set_ylabel("FCFA"); ax1.set_title("Comparaison des co√ªts totaux")
        charts.append(save_fig(fig1))

        # √âmissions
        fig2, ax2 = plt.subplots()
        dataframe.plot(kind="bar", x="Option", y="√âmissions CO‚ÇÇ (kg)", ax=ax2, legend=False)
        ax2.set_ylabel("kg CO‚ÇÇ"); ax2.set_title("Comparaison des √©missions")
        charts.append(save_fig(fig2))

        # Temps
        fig3, ax3 = plt.subplots()
        dataframe.plot(kind="bar", x="Option", y="Temps (h)", ax=ax3, legend=False)
        ax3.set_ylabel("heures"); ax3.set_title("Comparaison des temps de trajet")
        charts.append(save_fig(fig3))

        # Score global
        fig4, ax4 = plt.subplots()
        dataframe2 = dataframe.merge(df_scores[["Option","Score global"]], on="Option")
        dataframe2.plot(kind="bar", x="Option", y="Score global", ax=ax4, legend=False)
        ax4.set_ylabel("Score (0 = meilleur)"); ax4.set_title("Score global pond√©r√©")
        charts.append(save_fig(fig4))

        return charts

    st.divider()
    st.subheader("üìà Diagrammes comparatifs")
    charts_for_pdf = build_charts(df)

    # Affichage dans l‚Äôapp
    for ch in charts_for_pdf:
        st.image(ch)

    # =========================
    # PDF AVEC TABLEAU + DIAGRAMMES
    # =========================
    def generate_pdf(dataframe, best_rows):
        buffer = io.BytesIO()
        doc = SimpleDocTemplate(buffer, pagesize=A4)
        styles = getSampleStyleSheet()
        story = []

        story.append(Paragraph("üöö Rapport d‚Äôoptimisation logistique", styles["Title"]))
        story.append(Spacer(1, 12))
        story.append(Paragraph(
            f"Distance : {distance} km ‚Äî D√©lai maximum : {delai_max_h} h (marge d‚Äôarriv√©e de 10 min). "
            f"Marchandises : {goods_type} ‚Äî Poids : {poids_kg} kg ‚Äî Volume : {volume_m3} m¬≥.",
            styles["Normal"]
        ))
        story.append(Spacer(1, 16))

        # Tableau comparatif
        headers = ["Option","Motorisation","Temps (h)","Co√ªt total (FCFA)","√âmissions CO‚ÇÇ (kg)","Capacit√© restante (kg)","Volume restant (m¬≥)"]
        table_data = [headers] + dataframe[headers].values.tolist()
        table = Table(table_data, colWidths=[120,80,70,90,90,90,90])
        table.setStyle(TableStyle([
            ("BACKGROUND",(0,0),(-1,0), colors.HexColor("#264653")),
            ("TEXTCOLOR",(0,0),(-1,0), colors.white),
            ("ALIGN",(0,0),(-1,-1), "CENTER"),
            ("GRID",(0,0),(-1,-1), 0.5, colors.grey),
            ("FONTSIZE",(0,0),(-1,-1), 8),
            ("BOTTOMPADDING",(0,0),(-1,0), 6),
        ]))
        story.append(table)
        story.append(Spacer(1, 16))

        # Graphiques
        story.append(Paragraph("Diagrammes comparatifs", styles["Heading2"]))
        story.append(Spacer(1, 8))
        for ch in charts_for_pdf:
            story.append(Image(ch, width=430, height=260))
            story.append(Spacer(1, 12))

        # R√©sum√©s
        story.append(Paragraph("Synth√®se des meilleures options", styles["Heading2"]))
        story.append(Spacer(1, 8))
        br = best_rows
        synth = f"""
        <b>üí∞ Moins co√ªteuse :</b> {br['cost']['Option']} ({int(br['cost']['Co√ªt total (FCFA)'])} FCFA)<br/>
        <b>‚è±Ô∏è Plus rapide :</b> {br['time']['Option']} ({br['time']['Temps (h)']} h)<br/>
        <b>üå± Moins polluante :</b> {br['emis']['Option']} ({br['emis']['√âmissions CO‚ÇÇ (kg)']} kg CO‚ÇÇ)<br/>
        <b>üì¶ Mieux adapt√©e :</b> {br['goods']['Option']} (type : {goods_type})<br/>
        <b>üèÜ Recommand√©e :</b> {br['global']['Option']} (score global minimal)
        """
        story.append(Paragraph(synth, styles["Normal"]))

        doc.build(story)
        buffer.seek(0)
        return buffer

    best_rows = {
        "cost": best_cost,
        "time": best_time,
        "emis": best_emis,
        "goods": best_goods,
        "global": best_global
    }
    pdf_bytes = generate_pdf(df, best_rows)

    st.download_button(
        "üìÑ T√©l√©charger le rapport PDF",
        data=pdf_bytes,
        file_name="rapport_logistique.pdf",
        mime="application/pdf"
    )
