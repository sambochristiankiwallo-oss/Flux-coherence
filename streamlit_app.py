import streamlit as st
import pandas as pd
import numpy as np
import math
import matplotlib.pyplot as plt
from io import BytesIO

# PDF (reportlab - platypus)
from reportlab.lib.pagesizes import A4
from reportlab.lib import colors
from reportlab.lib.units import cm
from reportlab.lib.styles import getSampleStyleSheet, ParagraphStyle
from reportlab.platypus import (
    SimpleDocTemplate, Paragraph, Spacer, Table, TableStyle, Image as RLImage, PageBreak
)

# =============== Utilitaires ===============

def haversine(lat1, lon1, lat2, lon2):
    """Distance (km) entre 2 points lat/lon sur la sph√®re (formule de Haversine)."""
    R = 6371.0
    phi1, phi2 = math.radians(lat1), math.radians(lat2)
    dphi = math.radians(lat2 - lat1)
    dlambda = math.radians(lon2 - lon1)
    a = math.sin(dphi/2)**2 + math.cos(phi1)*math.cos(phi2)*math.sin(dlambda/2)**2
    c = 2*math.atan2(math.sqrt(a), math.sqrt(1-a))
    return R*c

def vitesse_effective(base, trafic):
    if trafic == "Faible": return base
    if trafic == "Moyen":  return base * 0.85
    return base * 0.70

def normalize_minmax(s: pd.Series) -> pd.Series:
    mn, mx = s.min(), s.max()
    if mx - mn < 1e-9:
        return pd.Series([0.5]*len(s), index=s.index)
    return (s - mn) / (mx - mn)

# =============== Param√®tres v√©hicules ===============
# conso : L/km (essence/diesel) ou kWh/km (√©lec)
# prix : FCFA par L (695 essence, 720 diesel) ou par kWh (109)
vehicles = {
    "Moto essence":        {"energie": "essence", "conso": 0.035, "co2": 0.08, "autonomie": 300, "capacite": 50,   "vitesse": 60, "prix": 695},
    "Moto √©lectrique":     {"energie": "elec",    "conso": 0.025, "co2": 0.02, "autonomie": 120, "capacite": 40,   "vitesse": 65, "prix": 109},
    "Tricycle essence":    {"energie": "essence", "conso": 0.050, "co2": 0.12, "autonomie": 200, "capacite": 200,  "vitesse": 50, "prix": 695},
    "Tricycle √©lectrique": {"energie": "elec",    "conso": 0.040, "co2": 0.03, "autonomie": 140, "capacite": 150,  "vitesse": 45, "prix": 109},
    "Voiture essence":     {"energie": "essence", "conso": 0.070, "co2": 0.18, "autonomie": 600, "capacite": 500,  "vitesse": 80, "prix": 695},
    "Voiture diesel":      {"energie": "diesel",  "conso": 0.060, "co2": 0.15, "autonomie": 800, "capacite": 600,  "vitesse": 80, "prix": 720},
    "Voiture hybride":     {"energie": "essence", "conso": 0.045, "co2": 0.09, "autonomie": 700, "capacite": 550,  "vitesse": 85, "prix": 695},
    "Voiture √©lectrique":  {"energie": "elec",    "conso": 0.180, "co2": 0.05, "autonomie": 400, "capacite": 500,  "vitesse": 75, "prix": 109},
    "Camion diesel":       {"energie": "diesel",  "conso": 0.250, "co2": 0.70, "autonomie":1000, "capacite":10000, "vitesse": 70, "prix": 720},
    "Camion √©lectrique":   {"energie": "elec",    "conso": 1.200, "co2": 0.20, "autonomie": 400, "capacite": 8000, "vitesse": 65, "prix": 109},
}

ADVANCE_HOURS = 0.25  # 15 minutes d'avance obligatoires

# =============== Interface ===============
st.set_page_config(page_title="Assistant Logistique Intelligent", page_icon="üöö", layout="wide")
st.title("üöö Assistant Intelligent d‚ÄôOptimisation Logistique")
st.caption("Compare co√ªt üí∞, d√©lai ‚è±Ô∏è, √©missions üåç et exporte un rapport PDF complet.")

with st.sidebar:
    st.header("‚öôÔ∏è Param√®tres")
    use_gps = st.checkbox("üìç Calculer la distance avec coordonn√©es (Haversine)")
    if use_gps:
        lat1 = st.number_input("Latitude d√©part", -90.0, 90.0, 5.354, format="%.6f")
        lon1 = st.number_input("Longitude d√©part", -180.0, 180.0, -4.001, format="%.6f")
        lat2 = st.number_input("Latitude arriv√©e", -90.0, 90.0, 5.400, format="%.6f")
        lon2 = st.number_input("Longitude arriv√©e", -180.0, 180.0, -3.980, format="%.6f")
        distance = haversine(lat1, lon1, lat2, lon2)
        st.info(f"üåç Distance calcul√©e : **{distance:.2f} km**")
    else:
        distance = st.number_input("Distance (km)", min_value=1.0, value=200.0, step=10.0)

    deadline = st.number_input("‚è±Ô∏è D√©lai maximal (heures)", min_value=1.0, value=6.0, step=0.25)
    trafic = st.selectbox("üö¶ Trafic", ["Faible", "Moyen", "√âlev√©"])
    route = st.selectbox("üõ£Ô∏è Route", ["Urbain", "Mixte", "Difficile"])
    marchandise = st.selectbox("üì¶ Marchandise", ["Standard", "P√©rissable", "Dangereux"])
    poids = st.number_input("‚öñÔ∏è Poids (kg)", min_value=1, value=500, step=10)

    st.subheader("üéõÔ∏è Pond√©rations (score global √† minimiser)")
    w_cost = st.slider("Poids Co√ªt", 0.0, 1.0, 0.40, 0.05)
    w_co2  = st.slider("Poids CO‚ÇÇ", 0.0, 1.0, 0.30, 0.05)
    w_time = st.slider("Poids Temps",0.0, 1.0, 0.30, 0.05)

    st.subheader("üöó V√©hicules √† comparer")
    vehicle_filter = st.multiselect("S√©lection", list(vehicles.keys()), default=list(vehicles.keys()))

lancer = st.button("üöÄ Lancer la simulation")

# =============== Contraintes fines ===============

def constraints_ok(row):
    # D√©lai avec 15 min d'avance
    if row["Temps (h)"] > max(0.0, deadline - ADVANCE_HOURS):
        return False
    # P√©rissable -> exiger temps court
    if marchandise == "P√©rissable" and row["Temps (h)"] > 3.0:
        return False
    # Dangereux -> √©viter deux-roues/triporteurs
    if marchandise == "Dangereux" and ("Moto" in row["V√©hicule"] or "Tricycle" in row["V√©hicule"]):
        return False
    return True

# =============== Simulation ===============

if lancer:
    results = []
    for name, v in vehicles.items():
        if name not in vehicle_filter:
            continue

        # Capacit√© & autonomie
        if poids > v["capacite"]:
            continue
        if v["autonomie"] is not None and distance > v["autonomie"]:
            continue

        # Conso / co√ªt / CO2
        conso = distance * v["conso"]          # L ou kWh
        cout  = conso * v["prix"]              # FCFA
        co2   = conso * v["co2"]               # kg CO2 (facteur simplifi√©)

        # Temps (avec trafic)
        v_eff = max(5.0, vitesse_effective(v["vitesse"], trafic))
        temps = distance / v_eff

        results.append({
            "V√©hicule": name,
            "Co√ªt (FCFA)": round(cout, 2),
            "CO‚ÇÇ (kg)": round(co2, 3),
            "Temps (h)": round(temps, 2),
        })

    if not results:
        st.warning("Aucune option ne satisfait les contraintes initiales (capacit√©/autonomie/filtre).")
    else:
        df = pd.DataFrame(results)
        df["Faisable"] = df.apply(constraints_ok, axis=1)

        st.subheader("üìä R√©sultats (toutes options calcul√©es)")
        st.dataframe(df.sort_values(["Faisable","Co√ªt (FCFA)"], ascending=[False, True]), use_container_width=True)

        dfF = df[df["Faisable"]].copy()
        if dfF.empty:
            st.error("Aucune solution ne respecte le d√©lai (avec 15 min d‚Äôavance) et les contraintes marchandise.")
        else:
            # Score global (√† minimiser) avec normalisation min-max
            dfF["_n_cost"] = normalize_minmax(dfF["Co√ªt (FCFA)"])
            dfF["_n_co2"]  = normalize_minmax(dfF["CO‚ÇÇ (kg)"])
            dfF["_n_time"] = normalize_minmax(dfF["Temps (h)"])
            dfF["Score global"] = (w_cost*dfF["_n_cost"] +
                                   w_co2*dfF["_n_co2"] +
                                   w_time*dfF["_n_time"])

            # Meilleures solutions
            best_cost  = dfF.loc[dfF["Co√ªt (FCFA)"].idxmin()]
            best_co2   = dfF.loc[dfF["CO‚ÇÇ (kg)"].idxmin()]
            best_time  = dfF.loc[dfF["Temps (h)"].idxmin()]
            best_score = dfF.loc[dfF["Score global"].idxmin()]

            st.subheader("üèÜ Meilleures solutions")
            st.success(f"üí∞ Moins co√ªteuse : **{best_cost['V√©hicule']}** ‚Äî {best_cost['Co√ªt (FCFA)']} FCFA")
            st.success(f"üå± Moins polluante : **{best_co2['V√©hicule']}** ‚Äî {best_co2['CO‚ÇÇ (kg)']} kg CO‚ÇÇ")
            st.success(f"‚ö° Plus rapide : **{best_time['V√©hicule']}** ‚Äî {best_time['Temps (h)']} h")
            st.success(f"ü§ñ Meilleure au global : **{best_score['V√©hicule']}** ‚Äî score {round(best_score['Score global'],3)}")

            # Graphique comparatif
            st.subheader("üìà Comparaison (Co√ªt / CO‚ÇÇ / Temps) ‚Äî options faisables")
            fig, ax = plt.subplots()
            df_plot = dfF.set_index("V√©hicule")[["Co√ªt (FCFA)","CO‚ÇÇ (kg)","Temps (h)"]]
            df_plot.plot(kind="bar", ax=ax)  # pas de couleurs sp√©cifi√©es
            ax.set_title("Comparaison des crit√®res")
            ax.set_ylabel("Valeurs")
            ax.tick_params(axis='x', labelrotation=45)
            st.pyplot(fig)

            # =============== PDF ===============
            def build_pdf(dataframe_faisable, bests_dict, chart_fig):
                buf = BytesIO()
                doc = SimpleDocTemplate(
                    buf, pagesize=A4,
                    leftMargin=1.5*cm, rightMargin=1.5*cm,
                    topMargin=1.5*cm, bottomMargin=1.5*cm
                )
                styles = getSampleStyleSheet()
                title = styles["Title"]
                h2 = styles["Heading2"]
                p = styles["BodyText"]
                bullet = ParagraphStyle('bullet', parent=p, bulletIndent=0, leftIndent=12)

                elems = []
                # En-t√™te
                elems.append(Paragraph("Rapport d‚ÄôOptimisation Logistique", title))
                elems.append(Spacer(1, 6))
                elems.append(Paragraph(
                    f"Distance : {distance:.2f} km ‚Äî D√©lai max : {deadline:.2f} h (avance requise : 15 min)",
                    styles["Italic"]
                ))
                elems.append(Paragraph(
                    f"Trafic : {trafic} ‚Äî Route : {route} ‚Äî Marchandise : {marchandise} ‚Äî Poids : {poids} kg",
                    styles["Italic"]
                ))
                elems.append(Spacer(1, 10))

                # Tableau meilleures solutions
                elems.append(Paragraph("Meilleures solutions par crit√®re", h2))
                best_table_data = [["Crit√®re", "V√©hicule", "Co√ªt (FCFA)", "CO‚ÇÇ (kg)", "Temps (h)"]]
                for label, row in bests_dict.items():
                    best_table_data.append([
                        label,
                        row["V√©hicule"],
                        f"{row['Co√ªt (FCFA)']}",
                        f"{row['CO‚ÇÇ (kg)']}",
                        f"{row['Temps (h)']}",
                    ])
                tbl = Table(best_table_data, repeatRows=1)
                tbl.setStyle(TableStyle([
                    ("BACKGROUND", (0,0), (-1,0), colors.lightblue),
                    ("TEXTCOLOR", (0,0), (-1,0), colors.black),
                    ("GRID", (0,0), (-1,-1), 0.4, colors.grey),
                    ("ALIGN", (2,1), (-1,-1), "CENTER"),
                    ("VALIGN", (0,0), (-1,-1), "MIDDLE"),
                    ("FONTSIZE", (0,0), (-1,-1), 9),
                ]))
                elems.append(tbl)
                elems.append(Spacer(1, 10))

                # Graphique
                elems.append(Paragraph("Illustration graphique", h2))
                chart_buf = BytesIO()
                chart_fig.tight_layout()
                chart_fig.savefig(chart_buf, format="png", dpi=180)
                chart_buf.seek(0)
                elems.append(RLImage(chart_buf, width=16*cm, height=8*cm))
                elems.append(PageBreak())

                # Liste d√©taill√©e par v√©hicule
                elems.append(Paragraph("D√©tails par v√©hicule (options faisables)", h2))
                df_list = dataframe_faisable[["V√©hicule","Co√ªt (FCFA)","CO‚ÇÇ (kg)","Temps (h)","Score global"]].sort_values("Co√ªt (FCFA)").reset_index(drop=True)
                for _, r in df_list.iterrows():
                    elems.append(Paragraph(f"‚Ä¢ <b>{r['V√©hicule']}</b>", p))
                    elems.append(Paragraph(f"&nbsp;&nbsp;&nbsp;Co√ªt total : {r['Co√ªt (FCFA)']} FCFA", bullet))
                    elems.append(Paragraph(f"&nbsp;&nbsp;&nbsp;√âmissions CO‚ÇÇ : {r['CO‚ÇÇ (kg)']} kg", bullet))
                    elems.append(Paragraph(f"&nbsp;&nbsp;&nbsp;Temps estim√© : {r['Temps (h)']} h", bullet))
                    elems.append(Paragraph(f"&nbsp;&nbsp;&nbsp;Score global : {round(r['Score global'],3)}", bullet))
                    elems.append(Spacer(1, 4))

                doc.build(elems)
                buf.seek(0)
                return buf

            bests = {
                "üí∞ Moins co√ªteuse": best_cost,
                "üå± Moins polluante": best_co2,
                "‚ö° Plus rapide": best_time,
                "ü§ñ Meilleure globale": best_score
            }
            pdf_buffer = build_pdf(dfF.copy(), bests, fig)

            st.download_button(
                "üì• T√©l√©charger le rapport PDF",
                data=pdf_buffer,
                file_name="rapport_logistique.pdf",
                mime="application/pdf"
            )
