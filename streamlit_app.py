# app.py
import streamlit as st
import pandas as pd
import matplotlib.pyplot as plt
from reportlab.lib.pagesizes import A4
from reportlab.platypus import SimpleDocTemplate, Paragraph, Spacer, Table, TableStyle, Image
from reportlab.lib.styles import getSampleStyleSheet
from reportlab.lib import colors

import os

# =========================
# Param√®tres v√©hicules
# =========================
vehicules = {
    # Deux/trois roues
    "Moto √©lectrique":      {"type": "electrique", "conso_kWh_km": 0.05, "vitesse": 50, "capacite": 50},
    "Tricycle √©lectrique":  {"type": "electrique", "conso_kWh_km": 0.10, "vitesse": 40, "capacite": 1000},

    # Voitures
    "Voiture √©lectrique":   {"type": "electrique", "conso_kWh_km": 0.18, "vitesse": 70, "capacite": 3000},
    "Voiture hybride":      {"type": "hybride",    "conso_L_km": 0.05, "conso_kWh_km": 0.05, "vitesse": 70, "capacite": 3000},
    "Voiture diesel":       {"type": "diesel",     "conso_L_km": 0.07, "vitesse": 70, "capacite": 3000},

    # Camions
    "Camion √©lectrique":    {"type": "electrique", "conso_kWh_km": 1.20, "vitesse": 60, "capacite": 19000},
    "Camion hybride":       {"type": "hybride",    "conso_L_km": 0.20, "conso_kWh_km": 0.15, "vitesse": 60, "capacite": 19000},
    "Camion diesel":        {"type": "diesel",     "conso_L_km": 0.30, "vitesse": 60, "capacite": 19000},
}

# Co√ªts (FCFA / unit√©)
prix = {"diesel": 720, "essence": 695, "kWh": 109}

# √âmissions (kg CO2 / unit√©)
emissions = {"diesel": 2.68, "essence": 2.31, "kWh": 0.05}

# =========================
# Pond√©rations dynamiques
# =========================
def pond√©rations(marchandise: str):
    """
    Renvoie (w_cout, w_co2, w_temps) selon le type de marchandise.
    """
    if marchandise == "P√©rissable":
        return 0.20, 0.20, 0.60   # priorit√© rapidit√©
    if marchandise == "Fragile":
        return 0.20, 0.60, 0.20   # priorit√© faible CO2/souplesse
    if marchandise == "Alimentaire":
        return 0.30, 0.40, 0.30   # √©quilibre √©co + rapidit√©
    return 0.50, 0.30, 0.20       # G√©n√©ral : co√ªt prioritaire

def texte_pond√©rations(marchandise: str):
    if marchandise == "P√©rissable":
        return "Priorit√© √† la rapidit√© (60%), co√ªt (20%), √©missions (20%)."
    if marchandise == "Fragile":
        return "Priorit√© √† la r√©duction des √©missions (60%), co√ªt (20%), rapidit√© (20%)."
    if marchandise == "Alimentaire":
        return "√âquilibre entre √©missions (40%), co√ªt (30%) et rapidit√© (30%)."
    return "√âquilibre standard : co√ªt (50%), √©missions (30%), rapidit√© (20%)."

# =========================
# Calculs
# =========================
def est_compatible_marchandise(nom: str, marchandise: str) -> bool:
    # R√®gles simples (tu peux les affiner plus tard)
    if marchandise in ["Fragile", "P√©rissable"] and "Moto" in nom:
        return False
    if marchandise == "Fragile" and "Tricycle" in nom:
        return False
    if marchandise in ["Alimentaire", "P√©rissable"] and "Camion" in nom:
        # on √©vite camions (plus lents) pour denr√©es sensibles
        return False
    return True

def calculer_solutions(distance_km: float, poids_kg: float, delai_h: float, marchandise: str) -> pd.DataFrame:
    w_cout, w_co2, w_temps = pond√©rations(marchandise)
    lignes = []

    for nom, v in vehicules.items():
        # Capacit√©
        if poids_kg > v["capacite"]:
            continue

        # Compatibilit√© marchandise
        if not est_compatible_marchandise(nom, marchandise):
            continue

        # Temps et contrainte d√©lai (au moins 10 minutes d'avance)
        temps_h = distance_km / v["vitesse"]
        if temps_h >= delai_h - (10/60):
            continue

        # Co√ªt et CO2 selon type
        if v["type"] == "diesel":
            cout = distance_km * v["conso_L_km"] * prix["diesel"]
            co2  = distance_km * v["conso_L_km"] * emissions["diesel"]
        elif v["type"] == "electrique":
            cout = distance_km * v["conso_kWh_km"] * prix["kWh"]
            co2  = distance_km * v["conso_kWh_km"] * emissions["kWh"]
        else:  # hybride
            cout = distance_km * (v["conso_L_km"] * prix["essence"] + v["conso_kWh_km"] * prix["kWh"])
            co2  = distance_km * (v["conso_L_km"] * emissions["essence"] + v["conso_kWh_km"] * emissions["kWh"])

        score = w_cout*cout + w_co2*co2 + w_temps*temps_h

        lignes.append({
            "V√©hicule": nom,
            "Co√ªt (FCFA)": round(cout, 2),
            "Temps (h)": round(temps_h, 2),
            "√âmissions CO2 (kg)": round(co2, 2),
            "Score global": round(score, 4)
        })

    df = pd.DataFrame(lignes)
    return df.sort_values("Score global", ascending=True).reset_index(drop=True)

def meilleures_solutions(df: pd.DataFrame):
    if df.empty:
        return {}
    return {
        "üí∞ Moins co√ªteuse": df.loc[df["Co√ªt (FCFA)"].idxmin(), "V√©hicule"],
        "‚ö° Plus rapide": df.loc[df["Temps (h)"].idxmin(), "V√©hicule"],
        "üåç Moins polluante": df.loc[df["√âmissions CO2 (kg)"].idxmin(), "V√©hicule"],
        "‚≠ê Meilleure globale (pond√©r√©e)": df.loc[df["Score global"].idxmin(), "V√©hicule"],
    }

# =========================
# PDF
# =========================
def tracer_et_sauver_bar(df, col, titre, fname):
    plt.figure()
    df.plot(x="V√©hicule", y=col, kind="bar", legend=False)
    plt.ylabel(col)
    plt.title(titre)
    plt.xticks(rotation=30, ha="right")
    plt.tight_layout()
    plt.savefig(fname)
    plt.close()

def generer_pdf(df, distance, poids, delai_max, marchandise, meilleures, texte_poids):
    pdf_path = "rapport_logistique.pdf"
    styles = getSampleStyleSheet()
    doc = SimpleDocTemplate(pdf_path, pagesize=A4)
    story = []

    # En-t√™te
    story.append(Paragraph("üì¶ Rapport d‚ÄôOptimisation Logistique", styles["Title"]))
    story.append(Spacer(1, 8))
    story.append(Paragraph(f"<b>Distance :</b> {distance} km", styles["Normal"]))
    story.append(Paragraph(f"<b>Poids :</b> {poids} kg {texte_poids}", styles["Normal"]))
    story.append(Paragraph(f"<b>D√©lai maximal :</b> {delai_max} h (arriv√©e exig√©e ‚â• 10 min avant)", styles["Normal"]))
    story.append(Paragraph(f"<b>Type de marchandise :</b> {marchandise}", styles["Normal"]))
    story.append(Paragraph(f"<b>Pond√©rations appliqu√©es :</b> {texte_pond√©rations(marchandise)}", styles["Italic"]))
    story.append(Spacer(1, 12))

    if df.empty:
        story.append(Paragraph("‚ö†Ô∏è Aucune solution valide n‚Äôa √©t√© trouv√©e pour ces contraintes.", styles["Normal"]))
        doc.build(story)
        return pdf_path

    # Tableau
    data = [list(df.columns)] + df.values.tolist()
    table = Table(data)
    table.setStyle(TableStyle([
        ("BACKGROUND", (0,0), (-1,0), colors.grey),
        ("TEXTCOLOR", (0,0), (-1,0), colors.whitesmoke),
        ("ALIGN", (0,0), (-1,-1), "CENTER"),
        ("FONTNAME", (0,0), (-1,0), "Helvetica-Bold"),
        ("GRID", (0,0), (-1,-1), 1, colors.black),
    ]))
    story.append(table)
    story.append(Spacer(1, 12))

    # Graphiques -> fichiers temporaires
    imgs = []
    plots = [
        ("Co√ªt (FCFA)", "Comparaison des co√ªts", "plot_cout.png"),
        ("Temps (h)", "Comparaison des temps", "plot_temps.png"),
        ("√âmissions CO2 (kg)", "Comparaison des √©missions", "plot_co2.png"),
    ]
    for col, titre, fname in plots:
        tracer_et_sauver_bar(df, col, titre, fname)
        imgs.append(fname)
        story.append(Image(fname, width=430, height=230))
        story.append(Spacer(1, 10))

    # Meilleures solutions
    story.append(Paragraph("üèÜ Meilleures solutions", styles["Heading2"]))
    for k, v in meilleures.items():
        story.append(Paragraph(f"{k} : {v}", styles["Normal"]))

    doc.build(story)

    # Nettoyage
    for f in imgs:
        try:
            os.remove(f)
        except Exception:
            pass

    return pdf_path

# =========================
# UI Streamlit
# =========================
st.title("üöö Assistant Logistique Intelligent")
st.caption("Compare les options de transport selon le co√ªt (FCFA), le temps (h) et les √©missions de CO‚ÇÇ (kg). "
           "Respect du d√©lai avec au moins 10 minutes d‚Äôavance.")

col1, col2 = st.columns(2)
with col1:
    distance = st.number_input("Distance (km)", min_value=1, value=100)
    delai_max = st.number_input("D√©lai maximum (heures)", min_value=1.0, value=5.0, step=0.25)
with col2:
    poids = st.number_input("Poids de la marchandise (kg)", min_value=1, value=500)
    marchandise = st.selectbox("Type de marchandise", ["G√©n√©ral", "Alimentaire", "Fragile", "P√©rissable"])

texte_poids = ""
if poids <= 50:
    texte_poids = "(compatible avec Moto, etc.)"
elif poids <= 1000:
    texte_poids = "(compatible d√®s Tricycle et au-dessus)"
elif poids <= 3000:
    texte_poids = "(compatible d√®s Voiture et au-dessus)"
elif poids <= 19000:
    texte_poids = "(compatible Camion uniquement)"
else:
    texte_poids = "(‚ùå Au-del√† de 19 t : aucune option disponible)"

if st.button("üîç Calculer les solutions"):
    df = calculer_solutions(distance, poids, delai_max, marchandise)

    if df.empty:
        st.error("‚ùå Aucune solution ne respecte les contraintes (poids/capacit√©, compatibilit√© marchandise, d√©lai avec 10 min d‚Äôavance).")
    else:
        st.subheader("üìä Tableau comparatif")
        st.dataframe(df, use_container_width=True)

        # Graphiques (matplotlib)
        st.subheader("üìà Graphiques comparatifs")
        for col, titre in [("Co√ªt (FCFA)", "Comparaison des co√ªts"),
                           ("Temps (h)", "Comparaison des temps"),
                           ("√âmissions CO2 (kg)", "Comparaison des √©missions")]:
            fig, ax = plt.subplots()
            df.plot(x="V√©hicule", y=col, kind="bar", legend=False, ax=ax)
            ax.set_title(titre)
            ax.set_ylabel(col)
            ax.tick_params(axis='x', rotation=30)
            st.pyplot(fig, clear_figure=True)

        # Meilleures solutions
        best = meilleures_solutions(df)
        st.subheader("üèÜ Meilleures solutions")
        for k, v in best.items():
            st.write(f"**{k}** : {v}")

        # Recommandation finale
        reco = best.get("‚≠ê Meilleure globale (pond√©r√©e)", None)
        if reco:
            st.success(f"‚úÖ **Solution recommand√©e** (pond√©r√©e selon '{marchandise}') : **{reco}**")

        # Export PDF : bouton direct
        pdf_file = generer_pdf(df, distance, poids, delai_max, marchandise, best, texte_poids)
        with open(pdf_file, "rb") as f:
            st.download_button(
                label="üìÑ T√©l√©charger le rapport PDF",
                data=f,
                file_name="rapport_logistique.pdf",
                mime="application/pdf"
            )
