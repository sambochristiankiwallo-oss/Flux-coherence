import streamlit as st
import pandas as pd
import matplotlib.pyplot as plt
from reportlab.lib.pagesizes import A4
from reportlab.platypus import SimpleDocTemplate, Paragraph, Spacer, Table, TableStyle, Image
from reportlab.lib.styles import getSampleStyleSheet
from reportlab.lib import colors

# -------------------------------
# Param√®tres des motorisations
# -------------------------------
vehicules = {
    "Moto √©lectrique": {"conso_kWh_km": 0.05, "capacit√©": 50, "vitesse": 50, "type": "√©lectrique"},
    "Tricycle √©lectrique": {"conso_kWh_km": 0.1, "capacit√©": 1000, "vitesse": 40, "type": "√©lectrique"},
    "Voiture √©lectrique": {"conso_kWh_km": 0.18, "capacit√©": 3000, "vitesse": 70, "type": "√©lectrique"},
    "Voiture diesel": {"conso_L_km": 0.07, "capacit√©": 3000, "vitesse": 70, "type": "diesel"},
    "Voiture hybride": {"conso_L_km": 0.05, "conso_kWh_km": 0.05, "capacit√©": 3000, "vitesse": 70, "type": "hybride"},
    "Camion diesel": {"conso_L_km": 0.3, "capacit√©": 19000, "vitesse": 60, "type": "diesel"},
    "Camion hybride": {"conso_L_km": 0.2, "conso_kWh_km": 0.15, "capacit√©": 19000, "vitesse": 60, "type": "hybride"},
    "Camion √©lectrique": {"conso_kWh_km": 1.2, "capacit√©": 19000, "vitesse": 60, "type": "√©lectrique"},
}

# Co√ªts en FCFA
prix = {"diesel": 720, "essence": 695, "kWh": 109}

# √âmissions CO2 (kg par unit√©)
emissions = {"diesel": 2.68, "essence": 2.31, "kWh": 0.05}

# -------------------------------
# Fonctions de calcul
# -------------------------------
def calculer_resultats(distance, poids, delai_max):
    resultats = []

    for nom, data in vehicules.items():
        if poids > data["capacit√©"]:
            continue

        temps_h = distance / data["vitesse"]

        # V√©rifier d√©lai avec marge de 10 min
        if temps_h > delai_max - (10/60):
            continue

        cout, co2 = 0, 0
        if data["type"] == "diesel":
            cout = distance * data["conso_L_km"] * prix["diesel"]
            co2 = distance * data["conso_L_km"] * emissions["diesel"]
        elif data["type"] == "√©lectrique":
            cout = distance * data["conso_kWh_km"] * prix["kWh"]
            co2 = distance * data["conso_kWh_km"] * emissions["kWh"]
        elif data["type"] == "hybride":
            cout = distance * (data["conso_L_km"] * prix["essence"] + data["conso_kWh_km"] * prix["kWh"])
            co2 = distance * (data["conso_L_km"] * emissions["essence"] + data["conso_kWh_km"] * emissions["kWh"])

        resultats.append({
            "V√©hicule": nom,
            "Co√ªt (FCFA)": round(cout, 2),
            "Temps (h)": round(temps_h, 2),
            "√âmissions CO2 (kg)": round(co2, 2),
            "Score global": round(cout*0.5 + co2*0.3 + temps_h*0.2, 2)
        })

    return pd.DataFrame(resultats)

def meilleures_solutions(df):
    meilleures = {}
    if df.empty:
        return meilleures
    meilleures["üí∞ Moins co√ªteuse"] = df.loc[df["Co√ªt (FCFA)"].idxmin()]["V√©hicule"]
    meilleures["‚ö° Plus rapide"] = df.loc[df["Temps (h)"].idxmin()]["V√©hicule"]
    meilleures["üåç Moins polluante"] = df.loc[df["√âmissions CO2 (kg)"].idxmin()]["V√©hicule"]
    meilleures["‚≠ê √âquilibr√©e"] = df.loc[df["Score global"].idxmin()]["V√©hicule"]
    return meilleures

def generer_pdf(df, distance, poids, delai_max, meilleures):
    fichier_pdf = "rapport_logistique.pdf"
    doc = SimpleDocTemplate(fichier_pdf, pagesize=A4)
    styles = getSampleStyleSheet()
    story = []

    story.append(Paragraph("üì¶ Rapport Logistique Intelligent", styles['Title']))
    story.append(Spacer(1, 12))
    story.append(Paragraph(f"Distance : {distance} km", styles['Normal']))
    story.append(Paragraph(f"Poids : {poids} kg", styles['Normal']))
    story.append(Paragraph(f"D√©lai max : {delai_max} h", styles['Normal']))
    story.append(Spacer(1, 12))

    # Tableau
    data_table = [list(df.columns)] + df.values.tolist()
    table = Table(data_table)
    table.setStyle(TableStyle([("BACKGROUND", (0,0), (-1,0), colors.grey),
                               ("TEXTCOLOR", (0,0), (-1,0), colors.whitesmoke),
                               ("ALIGN", (0,0), (-1,-1), "CENTER"),
                               ("GRID", (0,0), (-1,-1), 1, colors.black)]))
    story.append(table)
    story.append(Spacer(1, 12))

    # Graphiques
    for col, titre in [("Co√ªt (FCFA)", "Comparaison des co√ªts"),
                       ("Temps (h)", "Comparaison des temps"),
                       ("√âmissions CO2 (kg)", "Comparaison des √©missions")]:
        plt.figure()
        df.plot(x="V√©hicule", y=col, kind="bar", legend=False)
        plt.ylabel(col)
        plt.title(titre)
        plt.tight_layout()
        img_path = f"{col}.png"
        plt.savefig(img_path)
        plt.close()
        story.append(Image(img_path, width=400, height=200))
        story.append(Spacer(1, 12))

    # Meilleures solutions
    story.append(Paragraph("üèÜ Meilleures solutions :", styles['Heading2']))
    for critere, vehicule in meilleures.items():
        story.append(Paragraph(f"{critere} : {vehicule}", styles['Normal']))

    doc.build(story)
    return fichier_pdf

# -------------------------------
# Interface Streamlit
# -------------------------------
st.title("üöö Assistant Logistique Intelligent")

distance = st.number_input("Distance (km)", min_value=1, value=100)
poids = st.number_input("Poids de la marchandise (kg)", min_value=1, value=500)
delai_max = st.number_input("D√©lai maximum (heures)", min_value=1, value=5)

if st.button("Calculer"):
    df = calculer_resultats(distance, poids, delai_max)

    if df.empty:
        st.error("‚ö†Ô∏è Aucune solution possible avec ces contraintes.")
    else:
        st.subheader("üìä R√©sultats comparatifs")
        st.dataframe(df)

        meilleures = meilleures_solutions(df)
        st.subheader("üèÜ Meilleures solutions")
        for critere, vehicule in meilleures.items():
            st.write(f"{critere} ‚Üí {vehicule}")

        # Graphiques interactifs
        for col in ["Co√ªt (FCFA)", "Temps (h)", "√âmissions CO2 (kg)"]:
            st.bar_chart(df.set_index("V√©hicule")[col])

        # Export PDF
        fichier_pdf = generer_pdf(df, distance, poids, delai_max, meilleures)
        with open(fichier_pdf, "rb") as f:
            st.download_button("üìÑ T√©l√©charger le rapport PDF", f, file_name="rapport_logistique.pdf", mime="application/pdf")
